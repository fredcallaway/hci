constants of type e : G
constants of type <e,e> : C 
constants of type <e,t> : S
#not sure if we need an e,e relation, possibly for next to
variables of type e : a-z
variables of type <e,t> : P-Q
variables of type t : p q
variables of type <e,et> : R
variables of type <et,t> : T

multiple letter identifiers

use rule function application
use rule non-branching nodes
use rule predicate modification
use rule lambda abstraction

define gui: G_e
define draw: LPLx[Draw(P,x)] 
#replace Draw with python command
define square: Lx[square(x)]
define a: LP.P

#colors
define red: Lx[red(x)]
define orange: Lx[orange(x)]
define yellow: Lx[yellow(x)]
define green: Lx[green(x)]
define blue: Lx[blue(x)]
define purple: Lx[purple(x)]
define white: Lx[white(x)]
define black: Lx[black(x)]


exercise tree
title TITLE
directions TITLE

[.S [.NP gui][.VP [.V draw][.DP[.D a][.AP[.A red][.NP square]]]]]
