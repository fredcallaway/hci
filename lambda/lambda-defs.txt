HCI

constants of type e : it them
constants of type t : clear that
constants of type <et> : iterate
variables of type e : a-o r-z
variables of type t : p q
variables of type <et> : P Q
variables of type <e,et> : R

multiple letter identifiers

use rule function application
use rule non-branching nodes
use rule predicate modification
use rule lambda abstraction

#Screen

define screen: Lx[screen(x)]

#Shapes

define circle: Lx[circle(x)]
define square: Lx[square(x)]
define triangle: Lx[triangle(x)]

#Colors

define red: Lx[red(x)]
define orange: Lx[orange(x)]
define yellow: Lx[yellow(x)]
define green: Lx[green(x)]
define blue: Lx[blue(x)]
define purple: Lx[purple(x)]
define white: Lx[white(x)]
define black: Lx[black(x)]

#Actions

define draw: Lx[draw(x)]

#make1 = draw; it creates a new object and puts it on the screen
define make1: Lx[draw(x)]

#make2 modifies the parameters of an existing object on the screen
define make2: LxLP[P(x)]

#delete/remove/erase all move an item from the on-screen list to the off-screen list
define delete: Lx[hide(x)]
define remove: Lx[hide(x)]
define erase: Lx[hide(x)]

#clear removes all items from the on-screen and off-screen lists and resets the program to its starting state
define clear: clear

#'undo' reverts the world to the state it was in prior to the instruction stored in 'that'
define undo: Lp[undo(p)]

#'copy' runs the instruction stored in 'that' again; 'copy' should not update 'that'
define copy: Lp[copy(p)]

#Function Words

define a: LP[Gx(P(x))]
define the: LP[Ix(P(x))]

#'it' is the Python variable that contains the identity of the last updated element
define it: it

#'them' is the Python variable that contains the identity of the most recently updated elements
define them: them

#that: for use with undo and copy
#Ex: 'undo that'
define that: that

#'another' is semantically equivalent in our world to 'a'
#Ex: 'make1 another one1'
define another: LP[Gx(P(x))]

#one1: for use with make1
#Ex: 'make1 a blue one' (of whatever shape was most recently made)
#one1 is equal to the value of it.shape in Python 
#it.shape is the shape parameter of the object currently stored in 'it'
#it.shape(x) should operate like square(x) when it.shape = square
#it.shape is represented here as it-shape due to LC syntax restrictions
#Version of one1 that only preserves shape info in new object
#Draw a big blue square. Make a red one. => A red square. (Not big.)
define one1: Lx[it-shape(x)]
#Version of one1 that preserves all unchanged parameters in new object
#Draw a big blue square. Make a red one. => A big red square. (Preserves bigness.)
define one1: Lx[it-parameters(x)]

#one2: for use with make2
#Ex: 'make2 the blue one green'
define one2: LP.P

#ones: for use with make2
#Ex: 'make2 the blue ones green'
#ones iterates over the predicate in P to determine all of the entities in the on-screen list that satisfy P
define ones: Lx[iterate(x)]

#An 'and' for all occasions
define and-e: LxLy[x & y]
define and-t: LpLq[p & q]
define and-et: LPLQLx[P(x) & Q(x)]

exercise tree
title TITLE
directions DIRECTIONS

#Test Sentences

#[.VP [.V make1] [.DP [.D a] [.NP [.A blue] [.N square]]]]
#[.VP [.V make1] [.DP [.D a] [.NP [.A red] [.N one1]]]]
#[.VP [.V' [.V make2] [.NP it]] [.A green]]
#[.VP [.V' [.V make2] [.DP [.D the] [.NP [.A blue] [.N one2]]]] [.A green]]
#[.VP [.V' [.V make2] [.DP [.D the] [.NP [.A blue] [.N ones]]]] [.A green]]
#[.VP [.V delete] [.DP [.D the] [.N square]]]
#[.VP [.V undo] [.N that]]
#[.VP [.V copy] [.N that]]
[.VP [.V make1] [.NP [.A another] [.N one1]]]
