HCI

#constants of type e : 1-100
constants of type e : it
constants of type e : them
constants of type t : that
constants of type t : clear
constants of type <e,e> : set
variables of type e : a-o r-z
variables of type t : p q
variables of type <et> : P Q

multiple letter identifiers

use rule function application
use rule non-branching nodes
use rule predicate modification
use rule lambda abstraction

#Screen
#define screen: Lx[screen(x)]

#Shapes

define circle: Lx[circle(x)]
define square: Lx[square(x)]
define triangle: Lx[triangle(x)]
define oval: Lx[oval(x)]
define rectangle: Lx[rectangle(x)]

#Colors

define red: Lx[red(x)]
define orange: Lx[orange(x)]
define yellow: Lx[yellow(x)]
define green: Lx[green(x)]
define blue: Lx[blue(x)]
define purple: Lx[purple(x)]
define white: Lx[white(x)]
define black: Lx[black(x)]

#Sizes

define big: Lx[large(x)]
define large: Lx[large(x)]
define small: Lx[small(x)]
define wide: Lx[wide(x)]
define narrow: Lx[narrow(x)]
define tall: Lx[tall(x)]
define short: Lx[short(x)]

define bigger: Lx[larger(x)]
define larger: Lx[larger(x)]
define enlarge: Lx[larger(x)]
define smaller: Lx[smaller(x)]
define wider: Lx[wider(x)]
define narrower: Lx[narrower(x)]
define taller: Lx[taller(x)]
define shorter: Lx[shorter(x)]

#Screen Zones

#Screen Zones defined in hci.lex as PPs
#Ex: make1 a circle on the left side of the screen
#Ex: make1 a circle at the top of the screen
#Note: screen\Left must be written with escape character so that capital L isn't treated as a lambda
define on-the-left-side-of-the-screen: Lx[screen\Left(x)]
define on-the-right-side-of-the-screen: Lx[screenRight(x)]
define at-the-top-of-the-screen: Lx[screenTop(x)]
define at-the-bottom-of-the-screen: Lx[screenBottom(x)]

#Screen Zones defined in hci.lex as ADVs
#Ex: 'put it in the middle'
#Ex: 'move it to the top'
#Ex: 'move it to the right side of the screen' <--For some weird reason these parses as PPs not ADVs, despite their definition in hci.lex. As such, I've commented them out.
define at-the-top: Lx[screenTop(x)]
define to-the-top: Lx[screenTop(x)]
#define to-the-top-of-the-screen: Lx[screenTop(x)]
define at-the-bottom: Lx[screenBottom(x)]
define to-the-bottom: Lx[screenBottom(x)]
#define to-the-bottom-of-the-screen: Lx[screenBottom(x)]
define in-the-middle: Lx[screenMiddle(x)]
define to-the-middle: Lx[screenMiddle(x)]
#define in-the-middle-of-the-screen: Lx[screenMiddle(x)]
#define to-the-middle-of-the-screen: Lx[screenMiddle(x)]
#Note: screen\Left must be written with escape character so that capital L isn't treated as a lambda
#define to-the-left-side-of-the-screen: Lx[screen\Left(x)]
#define to-the-right-side-of-the-screen: Lx[screenRight(x)]

#Directional Movements

#Ex: move it left/right
#Ex: move it up/down
define left: Lx[left(x)]
define to-the-left: Lx[left(x)]
define right: Lx[right(x)]
define to-the-right: Lx[right(x)]
define up: Lx[up(x)]
define down: Lx[down(x)]

#Relational Movements

#Ex: move the circle to the left of the square
#Ex: move the circle over the square
define to-the-left-of: LyLx[leftOf(x,y)]
define to-the-left-side-of: LyLx[leftOf(x,y)]
define on-the-left-side-of: LyLx[leftOf(x,y)]
define to-the-right-of: LyLx[rightOf(x,y)]
define to-the-right-side-of: LyLx[rightOf(x,y)]
define on-the-right-side-of: LyLx[rightOf(x,y)]
define over: LyLx[over(x,y)]
define on-top-of: LyLx[over(x,y)]
define above: LyLx[over(x,y)]
define under: LyLx[under(x,y)]
define beneath: LyLx[under(x,y)]
define below: LyLx[under(x,y)]
define next-to: LyLx[nextTo(x,y)]
define inside-of: LyLx[insideOf(x,y)]
define in-the-middle-of: LyLx[insideOf(x,y)]

#Actions

#'draw' creates a new object and adds it to the on-screen list; 'draw' works with statements of type <e,t>
#Ex: draw a square
define draw: Lx[draw(x)]

#'make1' = 'draw'
#Ex: make1 a square
define make1: Lx[draw(x)]

#'make2' modifies the parameters of an existing object in the on-screen list; 'make2' works with statements of type <e>.
#Definition of 'make2' where [.VP [.V make2] [.N it]] combines with [.A green].
#define make2: LxLP[P(x)]
#Definition of 'make2' where [.V make] combines with [.SC [.N it] [.A green]] and 'it green' is a small clause.
define make2: Lp.p

#'delete'/'remove'/'erase' all move an item from the on-screen list to the off-screen list
define delete: Lx[hide(x)]
define remove: Lx[hide(x)]
define erase: Lx[hide(x)]

#'undo' reverts the world to the state it was in prior to the instruction stored in 'that'
define undo: Lp[undo(p)]

#'clear' removes all the items from the on-screen and off-screen lists and resets the program to its starting state
define clear-the-screen: clear

#'again' runs the instruction stored in 'that' again; 'again' should not update 'that'
define again: Lp[again(p)]

#'copy' = 'draw'
define copy: Lx[draw(x)]

#'move'/'put' applies a locational predicate to an entity
define move: LxLP[P(x)]
define put: LxLP[P(x)]

#Function Words

define a: LP[Gx(P(x))]
define an: LP[Gx(P(x))]
define the: LP[Ix(P(x))]

#'it' is the Python variable that contains the identity of the last updated object
define it: it

#'them' is the Python variable that contains the identity of the most recently updated objects
define them: them

#that: for use with undo and copy
#Ex: 'undo that'
define that: that

#'another' is semantically equivalent in our world to 'a'
#Ex: 'make1 another one1'
define another: LP[Gx(P(x))]

#one1: for use with make1
#Ex: 'make1 a blue one' (of whatever shape was most recently made)
#one1 is equal to the value of it.shape in Python 
#it.shape is the shape parameter of the object currently stored in 'it'
#it.shape(x) should operate like square(x) when it.shape = square
#it.shape is represented here as it-shape due to LC syntax restrictions
#Version of one1 that only preserves shape info in new object
#Draw a big blue square. Make a red one. => A red square. (Not big.)
#define one1: Lx[itShape(x)]
#Version of one1 that preserves all unchanged parameters in new object
#Draw a big blue square. Make a red one. => A big red square. (Preserves bigness.)
define one1: Lx[one1(x)]

#one2: for use with make2
#Ex: 'make2 the blue one green'
define one2: LP.P

#ones: for use with make2
#Ex: 'make2 the blue ones green'
#ones iterates over the predicate in P to determine all of the entities in the on-screen list that satisfy P
define s: LPLx[P(set(x))]

#An 'and' for all occasions
#define and-e: LaLb[a & b]
define and-t: LpLq[p & q]
define and-et: LPLQLx[P(x) & Q(x)]

#Do Support
#Ex: 'do that again'
define do: Lp.p

#Dummy function to extract 'result' for use with Plop
define result: Lp[result(p)]

exercise tree
title TITLE
directions DIRECTIONS

